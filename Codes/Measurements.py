import numpy as np
import numpy.linalg as la

#---------------------------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------DEFINITION OF VERTICES----------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------

#-------------------------------------------------------------SET 1---------------------------------------------------------------------------------------------

vert_p1 = np.array([[1,0,0],[-1,0,0],[0,1,0],[0,-1,0],[0,0,1],[0,0,-1]]) #P

vert_s1 = np.array([[0,1/(np.sqrt(2)),1/(np.sqrt(2))],[0,-1/(np.sqrt(2)),-1/(np.sqrt(2))], #S
[0,-1/(np.sqrt(2)),1/(np.sqrt(2))],[0,1/(np.sqrt(2)),-1/(np.sqrt(2))],
[1/(np.sqrt(2)),0,1/(np.sqrt(2))],[-1/(np.sqrt(2)),0,-1/(np.sqrt(2))],
[-1/(np.sqrt(2)),0,1/(np.sqrt(2))],[1/(np.sqrt(2)),0,-1/(np.sqrt(2))],
[1/(np.sqrt(2)),1/(np.sqrt(2)),0],[-1/(np.sqrt(2)),-1/(np.sqrt(2)),0],
[-1/(np.sqrt(2)),1/(np.sqrt(2)),0],[1/(np.sqrt(2)),-1/(np.sqrt(2)),0]
])

vert_s1 = np.concatenate((vert_p1,vert_s1))

vert_t1 = np.array([[1/2,1/2,1/(np.sqrt(2))],[-1/2,-1/2,-1/(np.sqrt(2))], #T
[-1/2,1/2,1/(np.sqrt(2))],[1/2,-1/2,-1/(np.sqrt(2))],
[1/2,1/2,-1/(np.sqrt(2))],[-1/2,-1/2,1/(np.sqrt(2))],
[1/2,-1/2,1/(np.sqrt(2))],[-1/2,1/2,-1/(np.sqrt(2))]
])

vert_t1 = np.concatenate((vert_s1,vert_t1))

#-------------------------------------------------------------SET 2---------------------------------------------------------------------------------------------

vert_p2 = np.array([[0,0,1],[0,0,-1]]) #P

vert_s2 = np.array([[0,1/(np.sqrt(2)),1/(np.sqrt(2))],[0,-1/(np.sqrt(2)),-1/(np.sqrt(2))], #S
[0,-1/(np.sqrt(2)),1/(np.sqrt(2))],[0,1/(np.sqrt(2)),-1/(np.sqrt(2))],
[1/(np.sqrt(2)),0,1/(np.sqrt(2))],[-1/(np.sqrt(2)),0,-1/(np.sqrt(2))],
[-1/(np.sqrt(2)),0,1/(np.sqrt(2))],[1/(np.sqrt(2)),0,-1/(np.sqrt(2))]
])

vert_s2 = np.concatenate((vert_p2,vert_s2))

vert_t2 = np.array([[1/2,1/2,1/(np.sqrt(2))],[-1/2,-1/2,-1/(np.sqrt(2))], #T
[-1/2,1/2,1/(np.sqrt(2))],[1/2,-1/2,-1/(np.sqrt(2))],
[1/2,1/2,-1/(np.sqrt(2))],[-1/2,-1/2,1/(np.sqrt(2))],
[1/2,-1/2,1/(np.sqrt(2))],[-1/2,1/2,-1/(np.sqrt(2))]
])

vert_t2 = np.concatenate((vert_s2,vert_t2))

#-------------------------------------------------------------SET 3---------------------------------------------------------------------------------------------

vert_s3 = np.array([[0,1/(np.sqrt(2)),1/(np.sqrt(2))],[0,-1/(np.sqrt(2)),-1/(np.sqrt(2))], #S
[0,-1/(np.sqrt(2)),1/(np.sqrt(2))],[0,1/(np.sqrt(2)),-1/(np.sqrt(2))],
[1/(np.sqrt(2)),0,1/(np.sqrt(2))],[-1/(np.sqrt(2)),0,-1/(np.sqrt(2))],
[-1/(np.sqrt(2)),0,1/(np.sqrt(2))],[1/(np.sqrt(2)),0,-1/(np.sqrt(2))]
])

vert_t3 = np.array([[1/2,1/2,1/(np.sqrt(2))],[-1/2,-1/2,-1/(np.sqrt(2))], #T
[-1/2,1/2,1/(np.sqrt(2))],[1/2,-1/2,-1/(np.sqrt(2))],
[1/2,1/2,-1/(np.sqrt(2))],[-1/2,-1/2,1/(np.sqrt(2))],
[1/2,-1/2,1/(np.sqrt(2))],[-1/2,1/2,-1/(np.sqrt(2))]
])

vert_t3 = np.concatenate((vert_s3,vert_t3))

#---------------------------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------PARAMETRIZATION OF Z COMPONENT OF VERTICES--------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------

def vert_custom(vert, z): # The vertex returned will be the result from transforming the z component of the original 'vert' into 'z' and renormalizing
    for i in range(vert.shape[0]):
        if vert[i,2] != 1 and vert[i,2] != -1:
            if vert[i,2] > 0:
                vert[i,2] = z
            elif vert[i,2] < 0:
                vert[i,2] = -z

            vert[i,0] = vert[i,0]*np.sqrt((1 - z**2)/2)/np.sqrt((vert[i,0])**2 + (vert[i,1])**2)
            vert[i,1] = vert[i,1]*np.sqrt((1 - z**2)/2)/np.sqrt((vert[i,0])**2 + (vert[i,1])**2)

    return vert

#---------------------------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------CONSTRUCT THE MEASUREMENTS AT THE BLOCH SPHERE FROM THE RESPECTIVE VERTICES-----------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------

def measurements(vertices):

    m_k = vertices.shape[0]
    medicoes = np.zeros([m_k,2,2], dtype=complex)

    for i in range(m_k):
        med_00 = (1+vertices[i][2])/2
        med_01 = (vertices[i][0]-vertices[i][1]*1j)/2
        med_10 = (vertices[i][0]+vertices[i][1]*1j)/2
        med_11 = (1-vertices[i][2])/2

        medicoes[i] = [[med_00,med_01],[med_10,med_11]]

    return medicoes